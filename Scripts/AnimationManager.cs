using Godot;
using System;

public partial class AnimationManager : Node2D
{
	[Export] private AnimatedSprite2D[] _animatedSprites; // Array animovan√Ωch sprite
	[Export] private string _defaultAnimationName = "default"; // N√°zev defaultn√≠ animace
	[Export] private bool _debugMode = true; // Zapne debug v√Ωpisy
	
	public override void _Ready()
	{
		if (_debugMode)
		{
			GD.Print("=== AnimationManager inicializov√°n ===");
			ListAllAvailableAnimations();
			
			// Automaticky otestujeme spu≈°tƒõn√≠ animac√≠ po 2 sekund√°ch
			GetTree().CreateTimer(2.0).Timeout += TestPlayAnimations;
		}
	}
	
	// Test metoda pro automatick√© spu≈°tƒõn√≠
	private void TestPlayAnimations()
	{
		GD.Print("=== AUTO TEST: Spou≈°t√≠m v≈°echny animace ===");
		PlayAllAnimations();
	}
	
	// Metoda pro spu≈°tƒõn√≠ v≈°ech animac√≠ nar√°z
	public void PlayAllAnimations()
	{
		GD.Print("=== SPOU≈†T√çM V≈†ECHNY ANIMACE ===");
		
		if (_animatedSprites == null || _animatedSprites.Length == 0)
		{
			GD.PrintErr("≈Ω√°dn√© AnimatedSprite2D nejsou p≈ôi≈ôazen√©!");
			return;
		}

		GD.Print($"Poƒçet sprite k zpracov√°n√≠: {_animatedSprites.Length}");

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				GD.Print($"Zpracov√°v√°m sprite: {sprite.Name}");
				GD.Print($"  - Visible p≈ôed: {sprite.Visible}");
				GD.Print($"  - IsPlaying p≈ôed: {sprite.IsPlaying()}");
				
				sprite.Visible = true;
				
				// Zkus√≠me naj√≠t a spustit animaci
				if (TryPlayAnimation(sprite, _defaultAnimationName))
				{
					GD.Print($"  ‚úÖ √öspƒõ≈°nƒõ spu≈°tƒõna animace '{_defaultAnimationName}' na: {sprite.Name}");
					GD.Print($"  - Visible po: {sprite.Visible}");
					GD.Print($"  - IsPlaying po: {sprite.IsPlaying()}");
				}
				else
				{
					GD.PrintErr($"  ‚ùå Nepoda≈ôilo se spustit animaci na: {sprite.Name}");
				}
			}
			else
			{
				GD.PrintErr("Nalezen null sprite v array!");
			}
		}
		
		GD.Print($"Zpracov√°no {_animatedSprites.Length} sprite!");
	}
	
	// Pomocn√° metoda pro bezpeƒçn√© spu≈°tƒõn√≠ animace
	private bool TryPlayAnimation(AnimatedSprite2D sprite, string animationName)
	{
		if (sprite.SpriteFrames == null)
		{
			GD.PrintErr($"SpriteFrames nen√≠ nastaveno pro {sprite.Name}!");
			return false;
		}
		
		// Z√≠sk√°me v≈°echny dostupn√© animace
		var animations = sprite.SpriteFrames.GetAnimationNames();
		
		if (_debugMode)
		{
			// Jednodu≈°≈°√≠ zp≈Øsob pro debug v√Ωpis
			System.Collections.Generic.List<string> animList = new System.Collections.Generic.List<string>();
			foreach (var anim in animations)
			{
				animList.Add(anim.ToString());
			}
			GD.Print($"Dostupn√© animace pro {sprite.Name}: {string.Join(", ", animList)}");
		}
		
		// Zkus√≠me spustit po≈æadovanou animaci
		if (sprite.SpriteFrames.HasAnimation(animationName))
		{
			GD.Print($"    üéØ Nalezena animace '{animationName}', spou≈°t√≠m...");
			sprite.Play(animationName);
			GD.Print($"    ‚ñ∂Ô∏è Play() zavol√°na na {sprite.Name}");
			GD.Print($"    üìä IsPlaying po Play(): {sprite.IsPlaying()}");
			GD.Print($"    üé¨ Current animation: {sprite.Animation}");
			GD.Print($"    #Ô∏è‚É£ Current frame: {sprite.Frame}");
			return true;
		}
		
		// Zkus√≠me bƒõ≈æn√© n√°zvy animac√≠
		string[] commonNames = { "default", "idle", "loop", "main", "animation" };
		foreach (string commonName in commonNames)
		{
			if (sprite.SpriteFrames.HasAnimation(commonName))
			{
				GD.Print($"    üîÑ Animace '{animationName}' neexistuje, spou≈°t√≠m '{commonName}' na {sprite.Name}");
				sprite.Play(commonName);
				GD.Print($"    ‚ñ∂Ô∏è Play('{commonName}') zavol√°na");
				GD.Print($"    üìä IsPlaying po Play(): {sprite.IsPlaying()}");
				return true;
			}
		}
		
		// Pokud nic nezabralo, spust√≠me prvn√≠ dostupnou
		foreach (var firstAnimation in animations)
		{
			if (_debugMode)
				GD.Print($"Spou≈°t√≠m prvn√≠ dostupnou animaci '{firstAnimation}' na {sprite.Name}");
			sprite.Play(firstAnimation.ToString());
			return true;
		}
		
		GD.PrintErr($"≈Ω√°dn√© animace nejsou k dispozici pro {sprite.Name}!");
		return false;
	}
	
	// Metoda pro zastaven√≠ v≈°ech animac√≠
	public void StopAllAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				sprite.Stop();
				GD.Print($"Zastavena animace: {sprite.Name}");
			}
		}
		
		GD.Print("V≈°echny animace zastaveny!");
	}
	
	// Metoda pro skryt√≠ v≈°ech animac√≠
	public void HideAllAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				sprite.Visible = false;
			}
		}
		
		GD.Print("V≈°echny animace skryty!");
	}
	
	// Metoda pro zobrazen√≠ v≈°ech animac√≠ (bez spu≈°tƒõn√≠)
	public void ShowAllAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				sprite.Visible = true;
			}
		}
		
		GD.Print("V≈°echny animace zobrazeny!");
	}
	
	// Metoda pro spu≈°tƒõn√≠ konkr√©tn√≠ animace podle n√°zvu
	public void PlayAnimationByName(string animationName)
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				sprite.Visible = true;
				if (TryPlayAnimation(sprite, animationName))
				{
					GD.Print($"Spu≈°tƒõna animace '{animationName}' na: {sprite.Name}");
				}
			}
		}
		
		GD.Print($"Pokus o spu≈°tƒõn√≠ animace '{animationName}' na v≈°ech sprite dokonƒçen!");
	}
	
	// Metoda pro reset v≈°ech animac√≠ na prvn√≠ frame
	public void ResetAllAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				sprite.Stop();
				sprite.Frame = 0;
			}
		}
		
		GD.Print("V≈°echny animace resetov√°ny!");
	}
	
	// Metoda pro pausov√°n√≠ v≈°ech animac√≠
	public void PauseAllAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null)
			{
				sprite.Pause();
			}
		}
		
		GD.Print("V≈°echny animace pozastaveny!");
	}
	
	// Metoda pro obnoven√≠ v≈°ech animac√≠ z pauzy
	public void ResumeAllAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
			return;

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null && !sprite.IsPlaying())
			{
				sprite.Play();
			}
		}
		
		GD.Print("V≈°echny animace obnoveny!");
	}
	
	// Pomocn√° metoda pro z√≠sk√°n√≠ poƒçtu animac√≠
	public int GetAnimationCount()
	{
		return _animatedSprites?.Length ?? 0;
	}
	
	// Debug metoda pro v√Ωpis v≈°ech dostupn√Ωch animac√≠
	public void ListAllAvailableAnimations()
	{
		if (_animatedSprites == null || _animatedSprites.Length == 0)
		{
			GD.Print("≈Ω√°dn√© AnimatedSprite2D nejsou p≈ôi≈ôazen√©!");
			return;
		}

		foreach (AnimatedSprite2D sprite in _animatedSprites)
		{
			if (sprite != null && sprite.SpriteFrames != null)
			{
				var animations = sprite.SpriteFrames.GetAnimationNames();
				
				// Jednodu≈°≈°√≠ zp≈Øsob pro debug v√Ωpis
				System.Collections.Generic.List<string> animList = new System.Collections.Generic.List<string>();
				foreach (var anim in animations)
				{
					animList.Add(anim.ToString());
				}
				
				GD.Print($"{sprite.Name} m√° animace: {string.Join(", ", animList)}");
			}
			else
			{
				GD.Print($"{sprite?.Name ?? "null"} nem√° nastaven√© SpriteFrames!");
			}
		}
	}
	
	// Metoda pro p≈ôid√°n√≠ AnimatedSprite2D do array programovƒõ
	public void AddAnimatedSprite(AnimatedSprite2D sprite)
	{
		if (sprite == null) return;
		
		// Zvƒõt≈°√≠me array o 1
		AnimatedSprite2D[] newArray = new AnimatedSprite2D[GetAnimationCount() + 1];
		
		// Zkop√≠rujeme st√°vaj√≠c√≠ sprite
		if (_animatedSprites != null)
		{
			_animatedSprites.CopyTo(newArray, 0);
		}
		
		// P≈ôid√°me nov√Ω sprite
		newArray[newArray.Length - 1] = sprite;
		_animatedSprites = newArray;
		
		GD.Print($"P≈ôid√°n AnimatedSprite2D: {sprite.Name}");
	}
	
	// Manu√°ln√≠ test metody pro troubleshooting
	public void TestSingleSprite(int index)
	{
		if (_animatedSprites == null || index >= _animatedSprites.Length || index < 0)
		{
			GD.PrintErr($"Neplatn√Ω index: {index}");
			return;
		}
		
		var sprite = _animatedSprites[index];
		GD.Print($"=== TESTUJU JEDNOTLIV√ù SPRITE [{index}]: {sprite?.Name} ===");
		
		if (sprite != null)
		{
			sprite.Visible = true;
			TryPlayAnimation(sprite, _defaultAnimationName);
		}
	}
	
	// Metoda pro debugging stavu v≈°ech sprite
	public void DebugAllSprites()
	{
		GD.Print("=== DEBUG STAV V≈†ECH SPRITE ===");
		
		if (_animatedSprites == null || _animatedSprites.Length == 0)
		{
			GD.Print("≈Ω√°dn√© sprite nejsou p≈ôi≈ôazen√©!");
			return;
		}
		
		for (int i = 0; i < _animatedSprites.Length; i++)
		{
			var sprite = _animatedSprites[i];
			if (sprite != null)
			{
				GD.Print($"[{i}] {sprite.Name}:");
				GD.Print($"  - Visible: {sprite.Visible}");
				GD.Print($"  - IsPlaying: {sprite.IsPlaying()}");
				GD.Print($"  - Current Animation: {sprite.Animation}");
				GD.Print($"  - Current Frame: {sprite.Frame}");
				GD.Print($"  - SpriteFrames: {(sprite.SpriteFrames != null ? "OK" : "NULL")}");
			}
			else
			{
				GD.Print($"[{i}] NULL sprite");
			}
		}
	}
}
